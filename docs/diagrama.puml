@startuml diagrama

class AssetMan {
    - m_textures: std::map<int, std::unique_ptr<sf::Texture>>
    - m_fonts: std::map<int, std::unique_ptr<sf::Font>>
    + AssetMan()
    +~AssetMan()
    + AddTexture(id: int, filePath: const std::string&, wantRepeated: bool = false): void
    + AddFont(id: int, filePath: const std::string&): void
    + GetTexture(id: int): const sf::Texture&
    + GetFont(id: int): const sf::Font&
    }
class Game{
    - m_context: std::shared_ptr<Context>
    - TIME_PER_FRAME: const sf::Time
    + Game()
    + ~Game()
    + Run() : void
}
class GameOver{
    - m_context : std::shared_ptr<Context>
    - m_gameOverTitle: sf::Text
    - m_retryButton: sf::Text
    - m_exitButton: sf::Text
    - m_isRetryButtonSelected: bool
    - m_isRetryButtonPressed : bool
    - m_isExitButtonSelected : bool
    - m_isExitButtonPressed : bool
    + GameOver(context: std::shared_ptr<Context>&)
    + ~GameOver()
    + Init(): void 
    + ProcessInput(): void
    + Update(deltaTime: const sf::Time&): void
    + Draw(): void 
}
class GamePlay{
    - m_context: std::shared_ptr<Context>
    - m_grass: sf::Sprite
    - m_food: sf::Sprite
    - m_walls: std::array<sf::Sprite, 4>
    - m_snake: Snake
    - m_scoreText: sf::Text
    - m_score: int
    - m_snakeDirection: sf::Vector2f
    - m_elapsedTime: sf::Time
    - m_isPaused: bool
    + GamePlay(context: std::shared_ptr<Context>&)
    + ~GamePlay()
    + Init(): void
    + ProcessInput(): void
    + Update(deltaTime: const sf::Time&): void
    + Draw(): void
    + Pause(): void
    + Start(): void
}
class MainMenu {
    - m_context: std::shared_ptr<Context>
    - m_gameTitle: sf::Text
    - m_playButton: sf::Text
    - m_exitButton: sf::Text
    - m_isPlayButtonSelected: bool
    - m_isPlayButtonPressed: bool
    - m_isExitButtonSelected: bool
    - m_isExitButtonPressed: bool
    + MainMenu(context: std::shared_ptr<Context>&)
    + ~MainMenu()
    + Init(): void override
    + ProcessInput(): void override
    + Update(deltaTime: const sf::Time&): void override
    + Draw(): void override
}
class PauseGame {
    - m_context: std::shared_ptr<Context>
    - m_context: std::shared_ptr<Context>
    + PauseGame(context: std::shared_ptr<Context>&)
    + ~PauseGame()
    + Init(): void
    + ProcessInput(): void 
    + Update(deltaTime: const sf::Time&): void
    + Draw(): void
}
class Snake {
    - m_body: std::list<sf::Sprite>
    - m_head: std::list<sf::Sprite>::iterator
    - m_tail: std::list<sf::Sprite>::iterator
    + Snake()
    + ~Snake()
    + Init(texture: const sf::Texture&)
    + Move(direction: const sf::Vector2f&)
    + IsOn(other: const sf::Sprite&) const
    + Grow(direction: const sf::Vector2f&)
    + IsSelfIntersecting(): bool
    + draw(target: sf::RenderTarget&, states: sf::RenderStates) const
}
class State {
    + State()
    + ~State()
    + Init(): void
    + ProcessInput(): void
    + Update(deltaTime: const sf::Time&): void
    + Draw(): void
    + Pause(): void
    + Start(): void
}
class StateMan {
    - m_stateStack: std::stack<std::unique_ptr<State>>
    - m_newState: std::unique_ptr<State>
    - m_add: bool
    - m_replace: bool
    - m_remove: bool
    - m_removeAll: bool
    + StateMan()
    + ~StateMan()
    + Add(toAdd: std::unique_ptr<State>, replace: bool = false): void
    + PopCurrent(): void
    + PopAll(): void
    + ProcessStateChange(): void
    + GetCurrent(): std::unique_ptr<State>& 
    + IsEmpty(): bool
}


MainMenu "1" *-- "1" Game
Game "1" *-- "1" GamePlay
Game "1" *-- "1" GameOver
Game "1" o-- "1" PauseGame
Game "1" o-- "1" StateMan
Game "1" o-- "1" AssetMan
StateMan "1" o-- "1" State
GamePlay "1" o-- "1" State
GamePlay "1" o--  "1" Snake
GameOver "1" o-- "1" State
Snake "1" o-- "1" State
